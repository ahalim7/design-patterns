Builder is a creational design pattern that lets you construct complex objects 
step by step. The pattern allows you to produce different types and 
representations of an object using the same construction code.


Use the Builder pattern to get rid of a “telescopic constructor”.

Use the Builder pattern when you want your code to be able to create different 
representations of some product (for example, stone and wooden houses). The Builder 
pattern can be applied when construction of various representations of the product 
involves similar steps that differ only in the details.

Use the Builder to construct Composite trees or other complex objects. 
The Builder pattern lets you construct products step-by-step. 
You could defer execution of some steps without breaking the final product. 
You can even call steps recursively, 
which comes in handy when you need to build an object tree.
